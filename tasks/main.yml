---
- name: Ensure packages are installed
  apt:
    name: "{{ item }}"
  with_items:
      - rsync
      - git
  update_cache: yes

- name: Install additional packages 
  apt:
    name: "{{ item.key }}={{ item.value.version }}"
    force: yes
  when: additional_packages
  with_dict: "{{ additional_packages }}"
  update_cache: yes
  ignore_errors: True
  
- name: Remove ruby package
  apt:
    name: ruby
    state: absent

- name: Creating project_root directory
  file:
    path: /var/www
    state: directory
    mode: 0755
    
- name: Copy all node data
  command: rsync -auvh --checksum --delete --chown=root:root /tmp/nodeapp/ /var/www/ --exclude node_modules
 
- name: Get npm version
  command: node -p -e "require('/var/www/package.json').dependencies.npm || '5.8.0'"
  register: npm_version
  
- name: Install npm package.
  command: "npm install npm@{{ npm_version.stdout }} -g --unsafe-perm"
  args:
    chdir: /var/www

- name: Get node version
  command: node -p -e "require('/var/www/package.json').dependencies.node || '8.9.4'"
  register: node_version
 
- name: Install node-bin-setup
  command: npm install node-bin-setup -g
  
- name: Clear npm cache
  command: npm cache clean --force
  
- name: Check current node version
  shell: test "$(node -v 2> /dev/null)" = v{{node_version.stdout}}
  register: nodejs_installed
  ignore_errors: True
 
- name: Install node node.js package.
  command: "npm install node@{{ node_version.stdout }} -g --unsafe-perm"
  args:
    chdir: /var/www
  when: nodejs_installed|failed

- name: Install packages based on package.json.
  command: npm ci --only=production
  args:
    chdir: /var/www
    
- name: Cleanup node_modules for npm and node
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /var/www/node_modules/npm
    - /var/www/node_modules/node
